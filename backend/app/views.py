from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
import json
import os, time
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.views.decorators.csrf import csrf_exempt
from django.db import connection

# Create your views here.
@csrf_exempt
def login(request):
    if request.method != 'POST':
        return HttpResponse(status=404)

    json_data = json.loads(request.body)
    clientID = json_data['clientID']   # the front end app's OAuth 2.0 Client ID
    idToken = json_data['idToken']     # user's OpenID ID Token, a JSon Web Token (JWT)

    now = time.time()                  # secs since epoch (1/1/70, 00:00:00 UTC)

    try:
        # Collect user info from the Google idToken, verify_oauth2_token checks
        # the integrity of idToken and throws a "ValueError" if idToken or
        # clientID is corrupted or if user has been disconnected from Google
        # OAuth (requiring user to log back in to Google).
        # idToken has a lifetime of about 1 hour
        idinfo = id_token.verify_oauth2_token(idToken, requests.Request(), clientID)
    except ValueError:
        # Invalid or expired token
        return HttpResponse(status=511)  # 511 Network Authentication Required

    # get username
    try:
        username = idinfo['name']
    except:
        username = "Profile NA"

    # Compute userID and add to database
    backendSecret = "giveamouseacookie"   # or server's private key
    nonce = str(now)
    hashable = idToken + backendSecret + nonce
    userID = hashlib.sha256(hashable.strip().encode('utf-8')).hexdigest()

    # Lifetime of userID is min of time to idToken expiration
    # (int()+1 is just ceil()) and target lifetime, which should
    # be less than idToken lifetime (~1 hour).
    lifetime = min(int(idinfo['exp']-now)+1, 60) # secs, up to idToken's lifetime

    cursor = connection.cursor()
    # clean up db table of expired chatterIDs
    cursor.execute('DELETE FROM chatters WHERE %s > expiration;', (now, ))

    # insert new userID
    # Ok for userID to expire about 1 sec beyond idToken expiration
    cursor.execute('INSERT INTO Logins (userid, username, expiration) VALUES '
                   '(%s, %s, %s);', (userID, username, now+lifetime))

    # Return userID and its lifetime
    return JsonResponse({'userID': userID, 'lifetime': lifetime})

# Get ContactInfo: /contactinfo/
@csrf_exempt
def getcontactinfo(request):
    if request.method != 'POST':
        return HttpResponse(status=400)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']

    cursor = connection.cursor()
    # Get user's contact info, split across these three tables
    cursor.execute(
        'SELECT * FROM contactinfo c '
        'INNER JOIN basicinfo b ON c.basicinfoid = b.basicinfoid '
        'INNER JOIN socialinfo s on c.socialinfoid = s.socialinfoid '
        'WHERE userid = %s;',
        (userId,)
    )
    #rowHeaders = [x[0] for x in cursor.description]
    #fetchedData = cursor.fetchone()
    #contactInfo = dict(zip(rowHeaders, fetchedData))
    contactInfo = cursor.fetchone()

    contactInfoDict = {
        'name': contactInfo[4],
        'imageUrl': contactInfo[5],
        'personalEmail': contactInfo[6],
        'businessEmail': contactInfo[7],
        'personalPhone': contactInfo[8],
        'businessPhone': contactInfo[9],
        'otherPhone': contactInfo[10],
        'bio': contactInfo[11],
        'instagram': contactInfo[13],
        'snapchat': contactInfo[14],
        'twitter': contactInfo[15],
        'linkedIn': contactInfo[16],
        'hobbies': contactInfo[17],
        'other': contactInfo[18]
    }

    response = {}
    response['contactInfo'] = contactInfoDict

    return JsonResponse(response)


# Create/POST ContactInfo: /contactinfo/create/
@csrf_exempt
def createcontactinfo(request):
    if request.method != 'POST':
        return HttpResponse(status=400)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']
    name = json_data['name']
    personalEmail = json_data['personalEmail']
    businessEmail = json_data['businessEmail'] or None
    personalPhone = json_data['personalPhone'] or None
    businessPhone = json_data['businessPhone'] or None
    otherPhone = json_data['otherPhone'] or None
    bio = json_data['bio'] or None
    instagram = json_data['instagram'] or None
    snapchat = json_data['snapchat'] or None
    twitter = json_data['twitter'] or None
    linkedIn = json_data['linkedIn'] or None
    hobbies = json_data['hobbies'] or None
    other = json_data['other'] or None

    # Do image stuff
    imageUrl = ''

    if request.FILES.get("image"):
        content = request.FILES['image']
        filename = name + ".jpeg"
        fs = FileSystemStorage()
        filename = fs.save(filename, content)
        imageUrl = fs.url(filename)

    cursor = connection.cursor()

    # RETURNING gives us the autogenerated id
    cursor.execute(
        'INSERT INTO basicinfo (name, imageurl, personalemail, '
        'businessemail, personalphone, businessphone, otherphone, bio) VALUES '
        '(%s, %s, %s, %s, %s, %s, %s, %s) RETURNING basicinfoid;',
        (name, imageUrl, personalEmail, businessEmail,
        personalPhone, businessPhone, otherPhone, bio)
    )

    # Take the basicinfoid from the query
    basicInfoId = cursor.fetchone()[0]

    cursor.execute(
        'INSERT INTO socialinfo'
        '(instagram, snapchat, twitter, linkedin, hobbies, other) VALUES'
        '(%s, %s, %s, %s, %s, %s) RETURNING socialinfoid;',
        (instagram, snapchat, twitter, linkedIn, hobbies, other)
    )

    socialInfoId = cursor.fetchone()[0]

    # We create new rows in BasicInfo and SocialInfo, then create the matching set
    # in ContactInfo
    cursor.execute(
        'INSERT INTO contactinfo (userid, basicinfoid, socialinfoid) VALUES (%s, %s, %s);',
        (userId, basicInfoId, socialInfoId)

    )

    return JsonResponse({})

# Update/POST ContactInfo: /contactinfo/update/
@csrf_exempt
def updatecontactinfo(request):
    if request.method != 'POST':
        return HttpResponse(status=400)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']
    name = json_data['name']
    personalEmail = json_data['personalEmail']
    businessEmail = json_data['businessEmail'] or None
    personalPhone = json_data['personalPhone'] or None
    businessPhone = json_data['businessPhone'] or None
    otherPhone = json_data['otherPhone'] or None
    bio = json_data['bio'] or None
    instagram = json_data['instagram'] or None
    snapchat = json_data['snapchat'] or None
    twitter = json_data['twitter'] or None
    linkedIn = json_data['linkedIn'] or None
    hobbies = json_data['hobbies'] or None
    other = json_data['other'] or None

    # Do image stuff
    imageUrl = ''

    if request.FILES.get("image"):
        content = request.FILES['image']
        filename = name + ".jpeg"
        fs = FileSystemStorage()
        # Delete previous image
        fs.delete(filename)
        # Save new one
        filename = fs.save(filename, content)
        imageUrl = fs.url(filename)

    cursor = connection.cursor()

    cursor.execute(
        'SELECT * FROM contactinfo WHERE userid = %s;',
        (userId,)
    )

    contactInfoRow = cursor.fetchone()
    contactInfo = {}
    contactInfo['basicInfoId'] = contactInfoRow[1]
    contactInfo['socialInfoId'] = contactInfoRow[2]

    cursor.execute(
        'UPDATE basicinfo SET name = %s, imageurl = %s, personalemail = %s, '
        'businessemail = %s, personalphone = %s, businessphone = %s, '
        'otherphone = %s, bio = %s WHERE basicinfoid = %s;',
        (name, imageUrl, personalEmail, businessEmail, personalPhone,
        businessPhone, otherPhone, bio, contactInfo['basicInfoId'])
    )

    cursor.execute(
        'UPDATE socialinfo SET instagram = %s, snapchat = %s, twitter = %s, '
        'linkedin = %s, hobbies = %s, other = %s WHERE socialinfoid = %s;',
        (instagram, snapchat, twitter, linkedIn,
        hobbies, other, contactInfo['socialInfoId'])
    )

    return JsonResponse({})

@csrf_exempt
def getprofiles(request):
    if request.method != 'POST':
        return HttpResponse(status=400)

    json_data = json.loads(request.body)
    userId = json_data['userId']

    cursor = connection.cursor()
    cursor.execute('SELECT * FROM profiles WHERE userid = %s;', (userId,))
    rows = cursor.fetchall()

    profiles = []

    for row in rows:
        profile = {}
        profile['profileId'] = row[1]
        profile['name'] = row[2]
        profile['includeBitString'] = row[3]
        profiles.append(profile)

    response = {}
    response['profiles'] = profiles     
    return JsonResponse(response)


#profile/create/
@csrf_exempt
def createprofile(request):
    if request.method != 'POST':
        return HttpResponse(status=404)

    json_data = json.loads(request.body)
    userId = json_data['userId']
    includeBitString = json_data['includeBitString']
    profileName = json_data['profileName']

    cursor = connection.cursor()
    cursor.execute(
        'INSERT INTO profiles (UserId, ProfileName, IncludeBitString) VALUES '
        '(%s, %s, %s) RETURNING ProfileId;', (userId, profileName, includeBitString)
    )
    profileId = cursor.fetchone()[0]
    
    response = {}
    response['profileId'] = profileId
    
    return JsonResponse(response)

#profile/update/
@csrf_exempt
def updateprofile(request):
    if request.method != 'POST':
        return HttpResponse(status=404)

    json_data = json.loads(request.body)
    userId = json_data['userId']
    profileName = json_data['profileName']
    profileId = json_data['profileId']
    includeBitString = json_data['includeBitString']
    
    cursor = connection.cursor()
    cursor.execute(
        'UPDATE profiles SET ProfileName = %s, IncludeBitString = %s '
        'WHERE UserId = %s AND ProfileId = %s;',
        (profileName, includeBitString, userId, profileId)
    )

    return JsonResponse({'Success message': "Update profile successfully"})

#/profile/delete/
@csrf_exempt
def deleteprofile(request):
    if request.method != 'POST':
        return HttpResponse(status=404)

    json_data = json.loads(request.body)
    userId = json_data['userId']
    profileId = json_data['profileId']

    cursor = connection.cursor()
    cursor.execute('DELETE FROM profiles WHERE ProfileId = %s;', (profileId,))

    return JsonResponse({'Success message': "Delete profile successfully"})

#/connection/create/
@csrf_exempt
def createconnection(request):
    if request.method != 'POST':
        return HttpResponse(status=404)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']
    profileId = json_data['profileId']
    location = json_data['location']
    time = json_data['time']

    cursor = connection.cursor()
    cursor.execute(
        'INSERT INTO connections (userid, profileid, timeshared, locationshared) '
        'VALUES (%s, %s, %s, %s);', (userId, profileId, time, location)
    )

    return JsonResponse({})

#/connection/delete/
@csrf_exempt
def deleteconnection(request):
    if request.method != 'POST':
        return HttpResponse(status=404)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']
    profileId = json_data['profileId']

    cursor = connection.cursor()
    cursor.execute('DELETE connections WHERE userid = %s AND profileid = %s;', (userId, profileId))

    return JsonResponse({})

#/connections/
@csrf_exempt
def getconnections(request):
    if request.method != 'POST':
        return HttpResponse(status=404)
    
    json_data = json.loads(request.body)
    userId = json_data['userId']

    cursor = connection.cursor()
    cursor.execute(
        'SELECT * FROM connections c INNER JOIN profiles p '
        'ON c.profileId = p.profileId WHERE c.userId = %s;', (userId,))

    rows = cursor.fetchall()
    
    connections = []
    for row in rows:
        connection = {}
        connection['name']
        connection['imageUrl']
        connection['personalEmail']
        connection['businessEmail']
        connection['personalPhone']
        connection['businessPhone']
        connection['otherPhone']
        connection['bio']


    response = {}

    response['connections'] = connections

    return JsonResponse(response)
